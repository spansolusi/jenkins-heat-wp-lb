heat_template_version: 2021-04-16
##Heat Stack to create whole internal network for instances, and Load Balancer, including the pool member and Floating IP Association from external
#
parameters:
   build_router:
    type: string
    label: "Router Name"
    description: "Router Name"
   internal_network:
    type: string
    label: "The Name of the Internal Network"
    description: "Internal Network"
   internal_network_cidr:
    type: string
    label: "Internal CIDR"
    description: "Internal CIDR. e.g: 10.x.x.0/24"
   internal_network_subnet:
    type: string
    label: "Internal Network Subnet Name"
    description: "The Name of the Network Subnet"
   external:
    type: string
    label: "External Network"
    description: "External Network(existing)"

resources:
  security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      name: allow-hhtp
      rules:
         - { remote_ip_prefix: 0.0.0.0/0, direction: ingress, protocol: tcp, port_range_min: 80, port_range_max: 80}
## Creating Router ##
  router:
    type: OS::Neutron::Router
    properties:
      name: {get_param: build_router}
      external_gateway_info:
       network: { get_param: external}

## Attaching Internal Network Subnet to Router Interface ##
  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet: { get_resource: int_subnet }

## Internal Network Creation ##
  int_network:
    type: OS::Neutron::Net
    properties:
      name: {get_param: internal_network}

## Internal Network Subnet Creation ##
  int_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: {get_param: internal_network_subnet}
      network: { get_resource: int_network }
      cidr: {get_param: internal_network_cidr}
      enable_dhcp: true

## Creating Load Balancer Floating IP ##
  lb_fip: 
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: external}

## Creating Load Balancer ##
  lb_loadbalancer:
    type: OS::Octavia::LoadBalancer
    properties:
      vip_subnet: {get_resource: int_subnet}

## Creating Instance 1 ##
  server_1: 
    type: "OS::Nova::Server"
    properties: 
      networks: 
        - port: {get_resource: server1_port}
      flavor: "m1.small"
      image: "nginx-hostname"
      availability_zone: nova 
      key_name: sar-dem-key1-prj1

## Creating Instance 1 Port ##
  server1_port:
    type: OS::Neutron::Port
    properties:
      security_groups: 
        - {get_resource: security_group}
      network_id: { get_resource: int_network }
      fixed_ips:
        - subnet_id: { get_resource: int_subnet }

## Creating Instance 2 ##
  server_2: 
    type: "OS::Nova::Server"
    properties: 
      networks: 
        - port: {get_resource: server2_port}
      flavor: "m1.small"
      image: "nginx-hostname"
      availability_zone: nova
      key_name: sar-dem-key1-prj1

## Creating Instance 2 Port ##
  server2_port:
    type: OS::Neutron::Port
    properties: 
      security_groups: 
        - {get_resource: security_group}
      network_id: { get_resource: int_network }
      fixed_ips:
        - subnet_id: { get_resource: int_subnet }

## Associating Floating IP to Load Balancer ##
  lb_association:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: lb_fip }
      port_id: {get_attr: [lb_loadbalancer, vip_port_id]}


## Creating Load Balancer Listener ##
  lb_listener:
    type: OS::Octavia::Listener
    properties:
      protocol: HTTP
      protocol_port: 80
      default_pool: { get_resource: lb_pool }
      loadbalancer: { get_resource: lb_loadbalancer }

## Creating Load Balancer Pool ##
  lb_pool:
    type: OS::Octavia::Pool
    properties:
      lb_algorithm: ROUND_ROBIN
      protocol: HTTP
      loadbalancer: { get_resource: lb_loadbalancer }

## Adding Load Balancer Pool Member ##
  lb_member_1:
    type: OS::Octavia::PoolMember
    properties:
      pool: { get_resource: lb_pool }
      address: { get_attr: [server_1, first_address] }
      protocol_port: 80

## Adding Load Balancer Pool Member ##
  lb_member_2:
    type: OS::Octavia::PoolMember
    properties:
      pool: { get_resource: lb_pool }
      address: { get_attr: [server_2, first_address] }
      protocol_port: 80

